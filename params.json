{
  "name": "I18next-scanner",
  "tagline": "Scan your code, extract translation keys/values, and merge them into i18n resource files.",
  "body": "# i18next-scanner [![build status](https://travis-ci.org/i18next/i18next-scanner.svg?branch=master)](https://travis-ci.org/i18next/i18next-scanner) [![Coverage Status](https://coveralls.io/repos/i18next/i18next-scanner/badge.svg?branch=master&service=github)](https://coveralls.io/github/i18next/i18next-scanner?branch=master)\r\n\r\n[![NPM](https://nodei.co/npm/i18next-scanner.png?downloads=true&stars=true)](https://nodei.co/npm/i18next-scanner/)\r\n\r\nScan your code, extract translation keys/values, and merge them into i18n resource files.\r\n\r\n## Notice\r\nThere is a major breaking change since v1.0, and the API interface and options are not compatible with v0.x.\r\n\r\nCheckout [Migration Guide](https://github.com/i18next/i18next-scanner/wiki/Migration-Guide) for doing migration from earlier versions.\r\n\r\n## Features\r\n* Fully compatible with [i18next](https://github.com/i18next/i18next) - a full-featured i18n javascript library for translating your webapplication.\r\n* Support [Key Based Fallback](http://i18next.com/translate/keyBasedFallback/) to write your code without the need to maintain i18n keys. This feature is available since [i18next@^2.1.0](https://github.com/i18next/i18next/blob/master/CHANGELOG.md#210)\r\n* A standalone parser API\r\n* A transform stream that works with both Gulp and Grunt task runner.\r\n* Support custom transform and flush functions.\r\n\r\n## Installation\r\n```\r\nnpm install --save-dev i18next-scanner\r\n```\r\n\r\n## Usage\r\n\r\n### Standard API\r\n```js\r\nvar fs = require('fs');\r\nvar Parser = require('i18next-scanner').Parser;\r\n\r\nvar customHandler = function(key) {\r\n    var defaultValue = '__TRANSLATION__'; // optional default value\r\n    parser.set(key, defaultValue);\r\n};\r\n\r\nvar parser = new Parser();\r\nvar content = '';\r\n\r\n// Parse Translation Function\r\n// i18next.t('key');\r\ncontent = fs.readFileSync('/path/to/app.js', 'utf-8');\r\nparser\r\n    .parseFuncFromString(content, customHandler) // pass a custom handler\r\n    .parseFuncFromString(content, { list: ['i18next.t']}) // override `func.list`\r\n    .parseFuncFromString(content, { list: ['i18next.t']}, customHandler)\r\n    .parseFuncFromString(content); // using default options and handler\r\n\r\n// Parse HTML Attribute\r\n// <div data-i18n=\"key\"></div>\r\ncontent = fs.readFileSync('/path/to/index.html', 'utf-8');\r\nparser\r\n    .parseAttrFromString(content, customHandler) // pass a custom handler\r\n    .parseAttrFromString(content, { list: ['data-i18n'] }) // override `attr.list`\r\n    .parseAttrFromString(content, { list: ['data-i18n'] }, customHandler)\r\n    .parseAttrFromString(content); // using default options and handler\r\n\r\nconsole.log(parser.get());\r\nconsole.log(parser.get({ sort: true }));\r\nconsole.log(parser.get('translation:key', { lng: 'en'}));\r\n```\r\n\r\n### Transform Stream API\r\nThe main entry function of [i18next-scanner](https://github.com/i18next/i18next-scanner) is a transform stream. You can use [vinyl-fs](https://github.com/wearefractal/vinyl) to create a readable stream, pipe the stream through [i18next-scanner](https://github.com/i18next/i18next-scanner) to transform your code into an i18n resource object, and write to a destination folder.\r\n\r\nHere is a simple example showing how that works:\r\n```js\r\nvar scanner = require('i18next-scanner');\r\nvar vfs = require('vinyl-fs');\r\nvar options = {\r\n    // See options at https://github.com/i18next/i18next-scanner#options\r\n};\r\nvfs.src(['/path/to/src'])\r\n    .pipe(scanner(options))\r\n    .pipe(vfs.dest('/path/to/dest'));\r\n```\r\n\r\nAlternatively, you can get a transform stream by calling createStream() as show below:\r\n```js\r\nvfs.src(['/path/to/src'])\r\n    .pipe(scanner.createStream(options))\r\n    .pipe(vfs.dest('/path/to/dest'));\r\n```\r\n\r\n### Gulp\r\nNow you are ready to set up a minimal configuration, and get started with Gulp. For example:\r\n```js\r\nvar gulp = require('gulp');\r\nvar scanner = require('i18next-scanner');\r\n\r\ngulp.task('i18next', function() {\r\n    return gulp.src(['src/**/*.{js,html}'])\r\n        .pipe(scanner({\r\n            lngs: ['en', 'de'], // supported languages\r\n            resource: {\r\n                // the source path is relative to current working directory\r\n                loadPath: 'assets/i18n/{{lng}}/{{ns}}.json',\r\n                \r\n                // the destination path is relative to your `gulp.dest()` path\r\n                savePath: 'i18n/{{lng}}/{{ns}}.json'\r\n            }\r\n        }))\r\n        .pipe(gulp.dest('assets'));\r\n});\r\n```\r\n\r\n### Grunt\r\nOnce you've finished the installation, add this line to your project's Gruntfile:\r\n```js\r\ngrunt.loadNpmTasks('i18next-scanner');\r\n```\r\n\r\nIn your project's Gruntfile, add a section named `i18next` to the data object passed into `grunt.initConfig()`, like so:\r\n```js\r\ngrunt.initConfig({\r\n    i18next: {\r\n        dev: {\r\n            src: 'src/**/*.{js,html}',\r\n            dest: 'assets',\r\n            options: {\r\n                lngs: ['en', 'de'],\r\n                resource: {\r\n                    loadPath: 'assets/i18n/{{lng}}/{{ns}}.json',\r\n                    savePath: 'i18n/{{lng}}/{{ns}}.json'\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n## API\r\n\r\nThere are two ways to use i18next-scanner:\r\n\r\n### Standard API\r\n```js\r\nvar Parser = require('i18next-scanner').Parser;\r\nvar parser = new Parser(options);\r\n\r\nvar code = \"i18next.t('key'); ...\";\r\nparser.parseFuncFromString(content); \r\n\r\nvar html = '<div data-i18n=\"key\"></div>';\r\nparser.parseAttrFromString(html);\r\n\r\nparser.get();\r\n````\r\n\r\n#### parser.parseFuncFromString\r\nParse translation key from JS function\r\n```js\r\nparser.parseFuncFromString(content)\r\n\r\nparser.parseFuncFromString(content, { list: ['_t'] });\r\n\r\nparser.parseFuncFromString(content, function(key) {\r\n    var defaultValue = key; // use key as the value\r\n    parser.set(key, defaultValue);\r\n});\r\n\r\nparser.parseFuncFromString(content, { list: ['_t'] }, function(key) {\r\n    parser.set(key); // use defaultValue\r\n});\r\n```\r\n\r\n#### parser.parseAttrFromString\r\nParse translation key from HTML attribute\r\n```js\r\nparser.parseAttrFromString(content)\r\n\r\nparser.parseAttrFromString(content, { list: ['data-i18n'] });\r\n\r\nparser.parseAttrFromString(content, function(key) {\r\n    var defaultValue = key; // use key as the value\r\n    parser.set(key, defaultValue);\r\n});\r\n\r\nparser.parseAttrFromString(content, { list: ['data-i18n'] }, function(key) {\r\n    parser.set(key); // use defaultValue\r\n});\r\n```\r\n\r\n#### parser.get\r\nGet the value of a translation key or the whole i18n resource store\r\n```js\r\n// Returns the whole i18n resource store\r\nparser.get();\r\n\r\n// Returns the resource store with the top-level keys sorted by alphabetical order \r\nparser.get({ sort: true });\r\n\r\n// Returns a value in fallback language (@see options.fallbackLng) with namespace and key\r\nparser.get('ns:key');\r\n\r\n// Returns a value with namespace, key, and lng\r\nparser.get('ns:key', { lng: 'en' });\r\n```\r\n#### parser.set\r\nSet a translation key with an optional defaultValue to i18n resource store\r\n\r\n```js\r\n// Set translation key\r\nparser.set(key);\r\n\r\n// Set translation key with its defaultValue\r\nparser.set(key, defaultValue);\r\n```\r\n\r\n### Transform Stream API\r\n```js\r\nvar scanner = require('i18next-scanner');\r\nscanner.createStream(options, customTransform /* optional */, customFlush /* optional */);\r\n```\r\n\r\n#### customTransform\r\nThe optional `customTransform` function is provided as the 2nd argument for the transform stream API. It must have the following signature: `function (file, encoding, done) {}`. A minimal implementation should call the `done()` function to indicate that the transformation is done, even if that transformation means discarding the file.\r\nFor example:\r\n```js\r\nvar scanner = require('i18next-scanner');\r\nvar vfs = require('vinyl-fs');\r\nvar customTransform = function _transform(file, enc, done) {\r\n    var parser = this.parser;\r\n    var content = fs.readFileSync(file.path, enc);\r\n\r\n    // add your code\r\n    done();\r\n};\r\n\r\nvfs.src(['/path/to/src'])\r\n    .pipe(scanner(options, customTransform))\r\n    .pipe(vfs.dest('path/to/dest'));\r\n```\r\n\r\nTo parse a translation key, call `parser.set(key, defaultValue)` to assign the key with an optional `defaultValue`.\r\nFor example:\r\n```js\r\nvar customTransform = function _transform(file, enc, done) {\r\n    var parser = this.parser;\r\n    var content = fs.readFileSync(file.path, enc);\r\n    \r\n    parser.parseFuncFromString(content, { list: ['i18n.t'] }, function(key) {\r\n        var defaultValue = '__L10N__';\r\n        parser.set(key, defaultValue);\r\n    });\r\n    \r\n    done();\r\n};\r\n```\r\n\r\nAlternatively, you may call `parser.set(defaultKey, value)` to assign the value with a default key. The `defaultKey` should be unique string and can never be `null`, `undefined`, or empty.\r\nFor example:\r\n```js\r\nvar hash = require('sha1');\r\nvar customTransform = function _transform(file, enc, done) {\r\n    var parser = this.parser;\r\n    var content = fs.readFileSync(file.path, enc);\r\n    \r\n    parser.parseFuncFromString(content, { list: ['i18n._'] }, function(key) {\r\n        var value = key;\r\n        var defaultKey = hash(value);\r\n        parser.set(defaultKey, value);\r\n    });\r\n    \r\n    done();\r\n};\r\n```\r\n\r\n#### customFlush\r\nThe optional `customFlush` function is provided as the last argument for the transform stream API, it is called just prior to the stream ending. You can implement your `customFlush` function to override the default `flush` function. When everything's done, call the `done()` function to indicate the stream is finished.\r\nFor example:\r\n```js\r\nvar scanner = require('i18next-scanner');\r\nvar vfs = require('vinyl-fs');\r\nvar customFlush = function _flush(done) {\r\n    var parser = this.parser;\r\n    var resStore = parser.getResourceStore();\r\n\r\n    // loop over the resStore\r\n    Object.keys(resStore).forEach(function(lng) {\r\n        var namespaces = resStore[lng];\r\n        Object.keys(namespaces).forEach(function(ns) {\r\n            var obj = namespaces[ns];\r\n            // add your code\r\n        });\r\n    });\r\n    \r\n    done();\r\n};\r\n\r\nvfs.src(['/path/to/src'])\r\n    .pipe(scanner(options, customTransform, customFlush))\r\n    .pipe(vfs.dest('/path/to/dest'));\r\n```\r\n\r\n\r\n## Default Options\r\n\r\nBelow are the configuration options with their default values:\r\n\r\n```javascript\r\n{\r\n    debug: false,\r\n    sort: false,\r\n    attr: {\r\n        list: ['data-i18n'],\r\n        extensions: ['.html', '.htm']\r\n    },\r\n    func: {\r\n        list: ['i18next.t', 'i18n.t'],\r\n        extensions: ['.js', '.jsx']\r\n    },\r\n    lngs: ['en'],\r\n    ns: ['translation'],\r\n    defaultNs: 'translation',\r\n    defaultValue: '',\r\n    resource: {\r\n        loadPath: 'i18n/{{lng}}/{{ns}}.json',\r\n        savePath: 'i18n/{{lng}}/{{ns}}.json',\r\n    },\r\n    nsSeparator: ':',\r\n    keySeparator: '.',\r\n    interpolation: {\r\n        pefix: '{{',\r\n        suffix: '}}'\r\n    }\r\n}\r\n```\r\n\r\n#### debug\r\n\r\nType: `Boolean` Default: `false`\r\n\r\nSet to `true` to trun on debug output.\r\n\r\n#### sort\r\n\r\nType: `Boolean` Default: `false`\r\n\r\nSet to `true` if you want to sort translation keys in ascending order.\r\n\r\n#### attr\r\n\r\nType: `Object` or `false`\r\n\r\nIf an `Object` is supplied, you can either specify a list of attributes and extensions, or override the default.\r\n```js\r\n{ // Default\r\n    attr: {\r\n        list: ['data-i18n'],\r\n        extensions: ['.html', '.htm']\r\n    }\r\n}\r\n```\r\n\r\nYou can set attr to `false` to disable parsing attribute as below:\r\n```js\r\n{\r\n    attr: false\r\n}\r\n```\r\n\r\n#### func\r\n\r\nType: `Object` or `false`\r\n\r\nIf an `Object` is supplied, you can either specify a list of translation functions and extensions, or override the default.\r\n```js\r\n{ // Default\r\n    func: {\r\n        list: ['i18next.t', 'i18n.t'],\r\n        extensions: ['.js', '.jsx']\r\n    }\r\n}\r\n```\r\n\r\nYou can set func to `false` to disable parsing translation function as below:\r\n```js\r\n{\r\n    func: false\r\n}\r\n```\r\n\r\n#### lngs\r\n\r\nType: `Array` Default: `['en']`\r\n\r\nAn array of supported languages.\r\n\r\n#### ns\r\n\r\nType: `String` or `Array` Default: `['translation']`\r\n\r\nA namespace string or an array of namespaces.\r\n\r\n#### defaultNs\r\n\r\nType: `String` Default: `'translation'`\r\n\r\nThe default namespace used if not passed to translation function.\r\n\r\n#### defaultValue\r\n\r\nType: `String` Default: `''`\r\n\r\nThe default value used if not passed to `parser.set`.\r\n\r\n#### resource\r\n\r\nType: `Object`\r\n\r\nResource options:\r\n```js\r\n{ // Default\r\n    resource: {\r\n        // path where resources get loaded from\r\n        savePath: 'i18n/{{lng}}/{{ns}}.json',\r\n\r\n        // path to store resources\r\n        savePath: 'i18n/{{lng}}/{{ns}}.json',\r\n\r\n        // jsonIndent to use when storing json files\r\n        jsonIndent: 2\r\n    }\r\n}\r\n```\r\n\r\n#### keySeparator\r\n\r\nType: `String` or `false` Default: `'.'`\r\n\r\nKey separator used in translation keys.\r\n\r\nSet to `false` to disable key separator if you prefer having keys as the fallback for translation (e.g. gettext). This feature is supported by [i18next@2.1.0](https://github.com/i18next/i18next/blob/master/CHANGELOG.md#210). Also see <strong>Key based fallback</strong> at http://i18next.com/translate/keyBasedFallback.\r\n\r\n#### nsSeparator\r\n\r\nType: `String` or `false` Default: `':'`\r\n\r\nNamespace separator used in translation keys.\r\n\r\nSet to `false` to disable namespace separator if you prefer having keys as the fallback for translation (e.g. gettext). This feature is supported by [i18next@2.1.0](https://github.com/i18next/i18next/blob/master/CHANGELOG.md#210). Also see <strong>Key based fallback</strong> at http://i18next.com/translate/keyBasedFallback.\r\n\r\n#### interpolation\r\n\r\nType: `Object`\r\n\r\ninterpolation options\r\n```js\r\n{ // Default\r\n    interpolation: {\r\n        // The prefix for variables\r\n        prefix: '{{',\r\n\r\n        // The suffix for variables\r\n        suffix: '}}'\r\n    }\r\n}\r\n```\r\n\r\n## Integration Guide\r\nCheckout [Integration Guide](https://github.com/i18next/i18next-scanner/wiki/Integration-Guide) to learn how to integrate with [React](https://github.com/i18next/i18next-scanner/wiki/Integration-Guide#react), [Gettext Style I18n](https://github.com/i18next/i18next-scanner/wiki/Integration-Guide#gettext-style-i18n), and [Handlebars](https://github.com/i18next/i18next-scanner/wiki/Integration-Guide#handlebars).\r\n\r\n## License\r\n\r\nCopyright (c) 2015-2016 Cheton Wu\r\n\r\nLicensed under the [MIT License](https://github.com/i18next/i18next-scanner/blob/master/LICENSE).\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}